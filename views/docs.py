# streamlit_app.py
import os
import io
import json
import re
import tempfile
from pathlib import Path
import streamlit as st

# --- Gemini (SDK oficial nova) ---
# pip install google-genai
from google import genai

# --------------------------
# Config
# --------------------------
GEMINI_MODEL = "gemini-2.0-flash"  # r√°pido e multimodal
API_KEY = os.getenv("GEMINI_API_KEY") or st.secrets["google_gemini"]["GEMINI_API_KEY"]

if not API_KEY:
    st.error("Config missing: defina GEMINI_API_KEY no ambiente ou em st.secrets.")
    st.stop()

client = genai.Client(api_key=API_KEY)

st.set_page_config(page_title="Analisador REURB (Gemini)", page_icon="üèóÔ∏è")
st.title("Analisador de Documentos para Regulariza√ß√£o Fundi√°ria (REURB)")

st.caption(
    "Envie **PDF/DOCX**. O Gemini ir√° classificar cada arquivo e sugerir "
    "quais documentos faltam para instruir um procedimento de REURB, com base na legisla√ß√£o."
)

# --------------------------
# Upload
# --------------------------
files = st.file_uploader(
    "Selecione arquivos (PDF ou DOCX)",
    accept_multiple_files=True,
    type=["pdf", "docx"],
)

if not files:
    st.info("Aguardando arquivos‚Ä¶")
    st.stop()

# --------------------------
# Upload para a Files API (48h)
# --------------------------
uploaded = []
progress = st.progress(0, text="Enviando arquivos para a Gemini Files API‚Ä¶")

for i, f in enumerate(files, start=1):
    # Salva em disco tempor√°rio para o m√©todo upload por caminho (mais robusto)
    with tempfile.TemporaryDirectory() as td:
        p = Path(td) / f.name
        p.write_bytes(f.getvalue())
        # A API infere MIME pelo sufixo; este caminho √© o recomendado nos exemplos oficiais
        up = client.files.upload(file=p)
        uploaded.append(up)
    progress.progress(int(i * 100 / len(files)), text=f"Enviado: {f.name}")

progress.empty()
st.success(f"{len(uploaded)} arquivo(s) enviados com sucesso.")

# --------------------------
# Prompt (instru√ß√£o ao modelo)
# --------------------------
SYSTEM_PROMPT = f"""
Voc√™ √© um assistente jur√≠dico especializado em Regulariza√ß√£o Fundi√°ria no Brasil.
Considere principalmente a Lei 13.465/2017 e o Decreto 9.310/2018 (REURB).
Tarefa:
1) Para CADA arquivo enviado, identificar o tipo de documento (ex.: RG, CPF, certid√£o, contrato, escritura,
   matr√≠cula, IPTU, carn√™, planta, memorial descritivo, ART/RRT, projeto urban√≠stico, Requerimento dos legitimados,
   Termo de Compromisso, lista/qualifica√ß√£o de ocupantes, CRF, etc.), com confian√ßa 0‚Äì1.
2) Extrair campos-chave √∫teis (ex.: nome, CPF/CNPJ, endere√ßo, matr√≠cula e cart√≥rio, datas, n¬∫ do processo, munic√≠pio).
3) Dizer se √© RELEVANTE para um processo padr√£o de REURB e por qu√™.
4) Com base no conjunto total, sugerir a MODALIDADE PROV√ÅVEL (REURB-S, REURB-E ou indeterminada) e
   LISTAR DOCUMENTOS PROVAVELMENTE FALTANTES para instruir um processo administrativo t√≠pico de REURB,
   com PRIORIDADE (alta/m√©dia/baixa) e, quando poss√≠vel, a BASE LEGAL sucinta (art./¬ß),
   lembrando: Lei 13.465/2017 e Decreto 9.310/2018.
5) Responda ESTRITAMENTE em JSON no schema:

{{
  "files": [
    {{
      "file_name": "string",
      "detected_type": "string",
      "confidence": 0.0,
      "relevant_for_reurb": true,
      "key_fields": {{}},
      "notes": "string"
    }}
  ],
  "likely_modality": "REURB-S" | "REURB-E" | null,
  "missing_documents": [
    {{
      "name": "string",
      "why_needed": "string",
      "legal_basis": "string|null",
      "priority": "alta" | "m√©dia" | "baixa"
    }}
  ]
}}

Regras:
- Se algo n√£o puder ser afirmado, use null ou explique em "notes".
- N√£o escreva coment√°rios fora do JSON.
"""

# --------------------------
# Chamada ao modelo
# --------------------------
with st.spinner("Analisando com Gemini‚Ä¶"):
    # A Files API permite passar os arquivos diretamente como partes de conte√∫do
    contents = []
    contents.extend(uploaded)        # todos os arquivos
    contents.append("\n\n" + SYSTEM_PROMPT)  # instru√ß√µes

    result = client.models.generate_content(
        model=GEMINI_MODEL,
        contents=contents,
    )

# --------------------------
# Parse robusto do JSON
# --------------------------
def extract_json(text: str):
    # remove cercas ```json ‚Ä¶ ```
    m = re.search(r"```json(.*?)```", text, flags=re.S)
    if m:
        return json.loads(m.group(1))
    # tenta pegar o primeiro bloco JSON "nu"
    m2 = re.search(r"\{.*\}\s*\Z", text, flags=re.S)
    if m2:
        return json.loads(m2.group(0))
    # por fim, tenta parse direto
    return json.loads(text)

raw_text = getattr(result, "text", "") or getattr(result, "output_text", "")
try:
    payload = extract_json(raw_text)
except Exception as e:
    st.error("Falha ao interpretar o JSON retornado pelo modelo.")
    st.code(raw_text)
    st.stop()

st.subheader("Resultado")
st.json(payload)

st.caption(
    "‚ö†Ô∏è Esta an√°lise √© assistiva e n√£o substitui parecer jur√≠dico. "
    "Verifique normas locais e exig√™ncias espec√≠ficas do munic√≠pio e do Registro de Im√≥veis."
)